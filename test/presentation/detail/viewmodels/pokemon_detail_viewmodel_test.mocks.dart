// Mocks generated by Mockito 5.4.6 from annotations
// in pokeapp/test/presentation/detail/viewmodels/pokemon_detail_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pokeapp/core/error/failures.dart' as _i5;
import 'package:pokeapp/domain/entities/pokemon.dart' as _i6;
import 'package:pokeapp/domain/repositories/pokemon_repository.dart' as _i2;
import 'package:pokeapp/domain/usecases/get_favorites_usecase.dart' as _i7;
import 'package:pokeapp/domain/usecases/get_pokemon_detail_usecase.dart' as _i3;
import 'package:pokeapp/domain/usecases/toggle_favorite_usecase.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePokemonRepository_0 extends _i1.SmartFake
    implements _i2.PokemonRepository {
  _FakePokemonRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetPokemonDetailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPokemonDetailUseCase extends _i1.Mock
    implements _i3.GetPokemonDetailUseCase {
  MockGetPokemonDetailUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PokemonRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePokemonRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.PokemonRepository);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Pokemon>> call(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Pokemon>>.value(
            _FakeEither_1<_i5.Failure, _i6.Pokemon>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Pokemon>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Pokemon>> byName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #byName,
          [name],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Pokemon>>.value(
            _FakeEither_1<_i5.Failure, _i6.Pokemon>(
          this,
          Invocation.method(
            #byName,
            [name],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Pokemon>>);
}

/// A class which mocks [GetFavoritesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavoritesUseCase extends _i1.Mock
    implements _i7.GetFavoritesUseCase {
  MockGetFavoritesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<int>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<List<int>>.value(<int>[]),
      ) as _i4.Future<List<int>>);
}

/// A class which mocks [ToggleFavoriteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockToggleFavoriteUseCase extends _i1.Mock
    implements _i8.ToggleFavoriteUseCase {
  MockToggleFavoriteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call(int? pokemonId) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [pokemonId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
